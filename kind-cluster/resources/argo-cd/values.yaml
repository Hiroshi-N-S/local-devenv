---
extraObjects:
    # -- See [upstream documentation](https://kubernetes.io/docs/concepts/configuration/configmap/)
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: common-env-cm
      namespace: argo-cd
    data:
      TZ: Asia/Tokyo
      http_proxy: ''
      https_proxy: ''
      no_proxy: ''

    # -- Middlewares are created as [Middlewares CRDs](https://doc.traefik.io/traefik/middlewares/http/overview/)
  - apiVersion: traefik.io/v1alpha1
    kind: Middleware
    metadata:
      name: argo-cd-stripprefix
      namespace: argo-cd
    spec:
      stripPrefix:
        prefixes:
          - /cd

## Argo Configs
configs:
  params:
    create: true
    server.insecure: true
    server.basehref: /cd
    server.rootpath: ''

  # General Argo CD configuration. Any values you put under `.configs.cm` are passed to argocd-cm ConfigMap.
  ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm.yaml
  cm:
    # -- Create the argocd-cm configmap for [declarative setup]
    create: true

    # -- Enable local admin user
    ## Ref: https://argo-cd.readthedocs.io/en/latest/faq/#how-to-disable-admin-user
    admin.enabled: true
    users.anonymous.enabled: false
    url: https://k8s-cluster.local/cd

    # -- OIDC configuration.
    ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/keycloak/
    oidc.tls.insecure.skip.verify: false
    oidc.config: |
      name: Keycloak
      issuer: https://synology-nas.local:8443/keycloak/realms/devops
      clientID: argo-cd
      clientSecret: ********************************
      requestedIDTokenClaims:
        groups:
          essential: true
      requestedScopes:
        - openid
        - profile
        - realm-roles

  # Argo CD RBAC policy configuration
  ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md
  rbac:
    # -- Create the argocd-rbac-cm configmap with ([Argo CD RBAC policy]) definitions.
    # If false, it is expected the configmap will be created by something else.
    # Argo CD will not work if there is no configmap created with the name above.
    create: true

    # -- The name of the default role which Argo CD will falls back to, when authorizing API requests (optional).
    # If omitted or empty, users may be still be able to login, but will see no apps, projects, etc...
    ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/
    policy.default: 'role:readonly'

    # -- File containing user-defined policies and role definitions.
    # @default -- `''` (See [values.yaml])
    policy.csv: |
      g, argo-cd-admin, role:admin
      g, argo-cd-readonly, role:readonly

## Globally shared configuration
global:
  # -- Default domain used by all components
  ## Used for ingresses, certificates, SSO, notifications, etc.
  domain: '' # used as host by ingress

## Server
server:
  ## Server service configuration
  service:
    # -- Server service type
    type: ClusterIP

  # Argo CD server ingress configuration
  ingress:
    # -- Enable an ingress resource for the Argo CD server
    enabled: true

    # -- Additional ingress annotations
    ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/#option-1-ssl-passthrough
    annotations:
      ingress.kubernetes.io/protocol: https
      ingress.kubernetes.io/ssl-redirect: 'true'
      traefik.ingress.kubernetes.io/router.tls: 'true'
      traefik.ingress.kubernetes.io/router.entrypoints: websecure
      traefik.ingress.kubernetes.io/router.middlewares: argo-cd-argo-cd-stripprefix@kubernetescrd

    # -- Defines which ingress controller will implement the resource
    ingressClassName: traefik

    # -- Additional ingress annotations
    ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/#option-1-ssl-passthrough
    path: /cd

    # -- Ingress path type. One of `Exact`, `Prefix` or `ImplementationSpecific`
    pathType: Prefix

    # -- Enable TLS configuration for the hostname defined at `server.ingress.hostname`
    ## TLS certificate will be retrieved from a TLS secret `argocd-server-tls`
    ## You can create this secret via `certificate` or `certificateSecret` option
    tls: false

  # -- Additional volumeMounts to the server main container
  volumeMounts:
    - name: sso-tls-secret-vol
      mountPath: /etc/ssl/certs/
      readOnly: true

  # -- Additional volumes to the server pod
  volumes:
    - name: sso-tls-secret-vol
      secret:
        secretName: sso-tls-secret

  # -- envFrom to pass to Argo CD server
  # @default -- `[]` (See [values.yaml])
  envFrom:
    - configMapRef:
        name: common-env-cm

## Application controller
controller:
  # -- envFrom to pass to application controller
  # @default -- `[]` (See [values.yaml])
  envFrom:
    - configMapRef:
        name: common-env-cm

## Dex
dex:
  # -- Enable dex
  enabled: false

## Redis
redis:
  # -- Enable redis
  enabled: true

  # -- envFrom to pass to the Redis server
  # @default -- `[]` (See [values.yaml])
  envFrom:
    - configMapRef:
        name: common-env-cm

## Repo Server
repoServer:
  # -- envFrom to pass to repo server
  # @default -- `[]` (See [values.yaml])
  envFrom:
    - configMapRef:
        name: common-env-cm

## Notifications controller
notifications:
  # -- Enable notifications controller
  enabled: true

  # -- envFrom to pass to the notifications controller
  # @default -- `[]` (See [values.yaml])
  extraEnvFrom:
    - configMapRef:
        name: common-env-cm
